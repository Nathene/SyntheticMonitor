// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Nathene/SyntheticMonitor/cmd/types"
	"github.com/Nathene/SyntheticMonitor/ent/predicate"
	"github.com/Nathene/SyntheticMonitor/ent/probe"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeProbe = "Probe"
)

// ProbeMutation represents an operation that mutates the Probe nodes in the graph.
type ProbeMutation struct {
	config
	op             Op
	typ            string
	id             *int
	status         *types.ProbeStatus
	_type          *types.ProbeType
	_config        *json.RawMessage
	append_config  json.RawMessage
	created_at     *time.Time
	updated_at     *time.Time
	last_heartbeat *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Probe, error)
	predicates     []predicate.Probe
}

var _ ent.Mutation = (*ProbeMutation)(nil)

// probeOption allows management of the mutation configuration using functional options.
type probeOption func(*ProbeMutation)

// newProbeMutation creates new mutation for the Probe entity.
func newProbeMutation(c config, op Op, opts ...probeOption) *ProbeMutation {
	m := &ProbeMutation{
		config:        c,
		op:            op,
		typ:           TypeProbe,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProbeID sets the ID field of the mutation.
func withProbeID(id int) probeOption {
	return func(m *ProbeMutation) {
		var (
			err   error
			once  sync.Once
			value *Probe
		)
		m.oldValue = func(ctx context.Context) (*Probe, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Probe.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProbe sets the old Probe of the mutation.
func withProbe(node *Probe) probeOption {
	return func(m *ProbeMutation) {
		m.oldValue = func(context.Context) (*Probe, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProbeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProbeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProbeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProbeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Probe.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *ProbeMutation) SetStatus(ts types.ProbeStatus) {
	m.status = &ts
}

// Status returns the value of the "status" field in the mutation.
func (m *ProbeMutation) Status() (r types.ProbeStatus, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Probe entity.
// If the Probe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProbeMutation) OldStatus(ctx context.Context) (v types.ProbeStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ProbeMutation) ResetStatus() {
	m.status = nil
}

// SetType sets the "type" field.
func (m *ProbeMutation) SetType(tt types.ProbeType) {
	m._type = &tt
}

// GetType returns the value of the "type" field in the mutation.
func (m *ProbeMutation) GetType() (r types.ProbeType, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Probe entity.
// If the Probe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProbeMutation) OldType(ctx context.Context) (v types.ProbeType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ProbeMutation) ResetType() {
	m._type = nil
}

// SetConfig sets the "config" field.
func (m *ProbeMutation) SetConfig(jm json.RawMessage) {
	m._config = &jm
	m.append_config = nil
}

// Config returns the value of the "config" field in the mutation.
func (m *ProbeMutation) Config() (r json.RawMessage, exists bool) {
	v := m._config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old "config" field's value of the Probe entity.
// If the Probe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProbeMutation) OldConfig(ctx context.Context) (v json.RawMessage, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// AppendConfig adds jm to the "config" field.
func (m *ProbeMutation) AppendConfig(jm json.RawMessage) {
	m.append_config = append(m.append_config, jm...)
}

// AppendedConfig returns the list of values that were appended to the "config" field in this mutation.
func (m *ProbeMutation) AppendedConfig() (json.RawMessage, bool) {
	if len(m.append_config) == 0 {
		return nil, false
	}
	return m.append_config, true
}

// ClearConfig clears the value of the "config" field.
func (m *ProbeMutation) ClearConfig() {
	m._config = nil
	m.append_config = nil
	m.clearedFields[probe.FieldConfig] = struct{}{}
}

// ConfigCleared returns if the "config" field was cleared in this mutation.
func (m *ProbeMutation) ConfigCleared() bool {
	_, ok := m.clearedFields[probe.FieldConfig]
	return ok
}

// ResetConfig resets all changes to the "config" field.
func (m *ProbeMutation) ResetConfig() {
	m._config = nil
	m.append_config = nil
	delete(m.clearedFields, probe.FieldConfig)
}

// SetCreatedAt sets the "created_at" field.
func (m *ProbeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProbeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Probe entity.
// If the Probe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProbeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProbeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProbeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProbeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Probe entity.
// If the Probe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProbeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProbeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (m *ProbeMutation) SetLastHeartbeat(t time.Time) {
	m.last_heartbeat = &t
}

// LastHeartbeat returns the value of the "last_heartbeat" field in the mutation.
func (m *ProbeMutation) LastHeartbeat() (r time.Time, exists bool) {
	v := m.last_heartbeat
	if v == nil {
		return
	}
	return *v, true
}

// OldLastHeartbeat returns the old "last_heartbeat" field's value of the Probe entity.
// If the Probe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProbeMutation) OldLastHeartbeat(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastHeartbeat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastHeartbeat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastHeartbeat: %w", err)
	}
	return oldValue.LastHeartbeat, nil
}

// ClearLastHeartbeat clears the value of the "last_heartbeat" field.
func (m *ProbeMutation) ClearLastHeartbeat() {
	m.last_heartbeat = nil
	m.clearedFields[probe.FieldLastHeartbeat] = struct{}{}
}

// LastHeartbeatCleared returns if the "last_heartbeat" field was cleared in this mutation.
func (m *ProbeMutation) LastHeartbeatCleared() bool {
	_, ok := m.clearedFields[probe.FieldLastHeartbeat]
	return ok
}

// ResetLastHeartbeat resets all changes to the "last_heartbeat" field.
func (m *ProbeMutation) ResetLastHeartbeat() {
	m.last_heartbeat = nil
	delete(m.clearedFields, probe.FieldLastHeartbeat)
}

// Where appends a list predicates to the ProbeMutation builder.
func (m *ProbeMutation) Where(ps ...predicate.Probe) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProbeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProbeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Probe, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProbeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProbeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Probe).
func (m *ProbeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProbeMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.status != nil {
		fields = append(fields, probe.FieldStatus)
	}
	if m._type != nil {
		fields = append(fields, probe.FieldType)
	}
	if m._config != nil {
		fields = append(fields, probe.FieldConfig)
	}
	if m.created_at != nil {
		fields = append(fields, probe.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, probe.FieldUpdatedAt)
	}
	if m.last_heartbeat != nil {
		fields = append(fields, probe.FieldLastHeartbeat)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProbeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case probe.FieldStatus:
		return m.Status()
	case probe.FieldType:
		return m.GetType()
	case probe.FieldConfig:
		return m.Config()
	case probe.FieldCreatedAt:
		return m.CreatedAt()
	case probe.FieldUpdatedAt:
		return m.UpdatedAt()
	case probe.FieldLastHeartbeat:
		return m.LastHeartbeat()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProbeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case probe.FieldStatus:
		return m.OldStatus(ctx)
	case probe.FieldType:
		return m.OldType(ctx)
	case probe.FieldConfig:
		return m.OldConfig(ctx)
	case probe.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case probe.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case probe.FieldLastHeartbeat:
		return m.OldLastHeartbeat(ctx)
	}
	return nil, fmt.Errorf("unknown Probe field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProbeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case probe.FieldStatus:
		v, ok := value.(types.ProbeStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case probe.FieldType:
		v, ok := value.(types.ProbeType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case probe.FieldConfig:
		v, ok := value.(json.RawMessage)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	case probe.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case probe.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case probe.FieldLastHeartbeat:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastHeartbeat(v)
		return nil
	}
	return fmt.Errorf("unknown Probe field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProbeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProbeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProbeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Probe numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProbeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(probe.FieldConfig) {
		fields = append(fields, probe.FieldConfig)
	}
	if m.FieldCleared(probe.FieldLastHeartbeat) {
		fields = append(fields, probe.FieldLastHeartbeat)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProbeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProbeMutation) ClearField(name string) error {
	switch name {
	case probe.FieldConfig:
		m.ClearConfig()
		return nil
	case probe.FieldLastHeartbeat:
		m.ClearLastHeartbeat()
		return nil
	}
	return fmt.Errorf("unknown Probe nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProbeMutation) ResetField(name string) error {
	switch name {
	case probe.FieldStatus:
		m.ResetStatus()
		return nil
	case probe.FieldType:
		m.ResetType()
		return nil
	case probe.FieldConfig:
		m.ResetConfig()
		return nil
	case probe.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case probe.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case probe.FieldLastHeartbeat:
		m.ResetLastHeartbeat()
		return nil
	}
	return fmt.Errorf("unknown Probe field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProbeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProbeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProbeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProbeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProbeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProbeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProbeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Probe unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProbeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Probe edge %s", name)
}
