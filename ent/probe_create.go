// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Nathene/SyntheticMonitor/cmd/types"
	"github.com/Nathene/SyntheticMonitor/ent/probe"
)

// ProbeCreate is the builder for creating a Probe entity.
type ProbeCreate struct {
	config
	mutation *ProbeMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (pc *ProbeCreate) SetStatus(ts types.ProbeStatus) *ProbeCreate {
	pc.mutation.SetStatus(ts)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *ProbeCreate) SetNillableStatus(ts *types.ProbeStatus) *ProbeCreate {
	if ts != nil {
		pc.SetStatus(*ts)
	}
	return pc
}

// SetType sets the "type" field.
func (pc *ProbeCreate) SetType(tt types.ProbeType) *ProbeCreate {
	pc.mutation.SetType(tt)
	return pc
}

// SetConfig sets the "config" field.
func (pc *ProbeCreate) SetConfig(jm json.RawMessage) *ProbeCreate {
	pc.mutation.SetConfig(jm)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProbeCreate) SetCreatedAt(t time.Time) *ProbeCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProbeCreate) SetNillableCreatedAt(t *time.Time) *ProbeCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProbeCreate) SetUpdatedAt(t time.Time) *ProbeCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProbeCreate) SetNillableUpdatedAt(t *time.Time) *ProbeCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (pc *ProbeCreate) SetLastHeartbeat(t time.Time) *ProbeCreate {
	pc.mutation.SetLastHeartbeat(t)
	return pc
}

// SetNillableLastHeartbeat sets the "last_heartbeat" field if the given value is not nil.
func (pc *ProbeCreate) SetNillableLastHeartbeat(t *time.Time) *ProbeCreate {
	if t != nil {
		pc.SetLastHeartbeat(*t)
	}
	return pc
}

// Mutation returns the ProbeMutation object of the builder.
func (pc *ProbeCreate) Mutation() *ProbeMutation {
	return pc.mutation
}

// Save creates the Probe in the database.
func (pc *ProbeCreate) Save(ctx context.Context) (*Probe, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProbeCreate) SaveX(ctx context.Context) *Probe {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProbeCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProbeCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProbeCreate) defaults() {
	if _, ok := pc.mutation.Status(); !ok {
		v := probe.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := probe.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := probe.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProbeCreate) check() error {
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Probe.status"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := probe.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Probe.status": %w`, err)}
		}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Probe.type"`)}
	}
	if v, ok := pc.mutation.GetType(); ok {
		if err := probe.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Probe.type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Probe.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Probe.updated_at"`)}
	}
	return nil
}

func (pc *ProbeCreate) sqlSave(ctx context.Context) (*Probe, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProbeCreate) createSpec() (*Probe, *sqlgraph.CreateSpec) {
	var (
		_node = &Probe{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(probe.Table, sqlgraph.NewFieldSpec(probe.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(probe.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(probe.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.Config(); ok {
		_spec.SetField(probe.FieldConfig, field.TypeJSON, value)
		_node.Config = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(probe.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(probe.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.LastHeartbeat(); ok {
		_spec.SetField(probe.FieldLastHeartbeat, field.TypeTime, value)
		_node.LastHeartbeat = &value
	}
	return _node, _spec
}

// ProbeCreateBulk is the builder for creating many Probe entities in bulk.
type ProbeCreateBulk struct {
	config
	err      error
	builders []*ProbeCreate
}

// Save creates the Probe entities in the database.
func (pcb *ProbeCreateBulk) Save(ctx context.Context) ([]*Probe, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Probe, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProbeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProbeCreateBulk) SaveX(ctx context.Context) []*Probe {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProbeCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProbeCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
